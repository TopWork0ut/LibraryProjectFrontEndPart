{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport axios from 'axios';\n// import qs from 'qs';\n\nconst AUTH_SERVER_ADDRESS = \"http://localhost:8090\";\nconst CLIENT_ID = \"LibraryAppClient\";\nconst REDIRECT_URL = \"http://localhost:3000/get-access-token-by-code\";\nconst CLIENT_SECRET = \"vqMQIxHnbyVga77QOped0i1uh0Ewn94u\";\nconst CODE_CHALLENGE = \"61dcd90c-01e1-4a01-a40a-11538f121c08.a4ceddf2-4a25-482d-9f75-0681b0c6e13b.6e7a8a21-bdb5-49e8-8f6b-8491267a0c90\";\nexport default function GetAccessToken() {\n  _s();\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n  useEffect(() => {\n    const code = searchParams.get(\"code\");\n    const xWwwformUrlencodedData = {\n      grant_type: \"authorization_code\",\n      client_id: CLIENT_ID,\n      redirect_uri: REDIRECT_URL,\n      client_secret: CLIENT_SECRET,\n      code_challenge: CODE_CHALLENGE,\n      code: code\n    };\n\n    // axios.post(`${AUTH_SERVER_ADDRESS}/realms/LibraryAppRealm/protocol/openid-connect/token`, \n    //             {\n    //                 // headers: {Authorization: BEARER_HEADER_PREFIX + access_token}\n    //             })\n\n    // navigate('/')\n  }, [navigate]);\n}\n_s(GetAccessToken, \"v8hQjlU8qJmeVDPESM/FtpABWjw=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c = GetAccessToken;\nvar _c;\n$RefreshReg$(_c, \"GetAccessToken\");","map":{"version":3,"names":["useEffect","useNavigate","useSearchParams","axios","AUTH_SERVER_ADDRESS","CLIENT_ID","REDIRECT_URL","CLIENT_SECRET","CODE_CHALLENGE","GetAccessToken","_s","navigate","searchParams","setSearchParams","code","get","xWwwformUrlencodedData","grant_type","client_id","redirect_uri","client_secret","code_challenge","_c","$RefreshReg$"],"sources":["D:/nulp/6_semester/PZ-documenting/project/frontend/LibraryProjectFrontEndPart/my-react-app/src/requests/GetAccessToken.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n// import qs from 'qs';\r\n\r\nconst AUTH_SERVER_ADDRESS = \"http://localhost:8090\"\r\nconst CLIENT_ID = \"LibraryAppClient\"\r\nconst REDIRECT_URL = \"http://localhost:3000/get-access-token-by-code\"\r\nconst CLIENT_SECRET = \"vqMQIxHnbyVga77QOped0i1uh0Ewn94u\"\r\nconst CODE_CHALLENGE = \"61dcd90c-01e1-4a01-a40a-11538f121c08.a4ceddf2-4a25-482d-9f75-0681b0c6e13b.6e7a8a21-bdb5-49e8-8f6b-8491267a0c90\"\r\n\r\nexport default function GetAccessToken(){\r\n    const navigate = useNavigate()\r\n    const [searchParams, setSearchParams] = useSearchParams()\r\n\r\n    useEffect(() => {\r\n        const code = searchParams.get(\"code\")\r\n\r\n        const xWwwformUrlencodedData = {\r\n            grant_type: \"authorization_code\",\r\n            client_id: CLIENT_ID,\r\n            redirect_uri: REDIRECT_URL,\r\n            client_secret: CLIENT_SECRET,\r\n            code_challenge: CODE_CHALLENGE,\r\n            code: code\r\n        }\r\n        \r\n\r\n        // axios.post(`${AUTH_SERVER_ADDRESS}/realms/LibraryAppRealm/protocol/openid-connect/token`, \r\n        //             {\r\n        //                 // headers: {Authorization: BEARER_HEADER_PREFIX + access_token}\r\n        //             })\r\n\r\n        // navigate('/')\r\n    }, [navigate]);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,eAAe,QAAQ,kBAAkB;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB;;AAEA,MAAMC,mBAAmB,GAAG,uBAAuB;AACnD,MAAMC,SAAS,GAAG,kBAAkB;AACpC,MAAMC,YAAY,GAAG,gDAAgD;AACrE,MAAMC,aAAa,GAAG,kCAAkC;AACxD,MAAMC,cAAc,GAAG,gHAAgH;AAEvI,eAAe,SAASC,cAAcA,CAAA,EAAE;EAAAC,EAAA;EACpC,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGX,eAAe,CAAC,CAAC;EAEzDF,SAAS,CAAC,MAAM;IACZ,MAAMc,IAAI,GAAGF,YAAY,CAACG,GAAG,CAAC,MAAM,CAAC;IAErC,MAAMC,sBAAsB,GAAG;MAC3BC,UAAU,EAAE,oBAAoB;MAChCC,SAAS,EAAEb,SAAS;MACpBc,YAAY,EAAEb,YAAY;MAC1Bc,aAAa,EAAEb,aAAa;MAC5Bc,cAAc,EAAEb,cAAc;MAC9BM,IAAI,EAAEA;IACV,CAAC;;IAGD;IACA;IACA;IACA;;IAEA;EACJ,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;AAElB;AAACD,EAAA,CAzBuBD,cAAc;EAAA,QACjBR,WAAW,EACYC,eAAe;AAAA;AAAAoB,EAAA,GAFnCb,cAAc;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}