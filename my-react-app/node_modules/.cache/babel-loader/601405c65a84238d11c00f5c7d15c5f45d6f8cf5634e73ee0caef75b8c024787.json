{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport qs from 'qs';\nimport Request from \"./Request\";\nimport { HttpMethods } from \"./HttpMethods\";\nexport const AUTH_SERVER_ADDRESS = \"http://localhost:8090\";\nexport const CLIENT_ID = \"LibraryAppClient\";\nconst REDIRECT_URL = \"http://localhost:3000/get-access-token-by-code\";\nconst CLIENT_SECRET = \"6xERbEJcORF4vdW5OdqyEyGtsGRbhQaT\";\nconst CODE_CHALLENGE = \"61dcd90c-01e1-4a01-a40a-11538f121c08.a4ceddf2-4a25-482d-9f75-0681b0c6e13b.6e7a8a21-bdb5-49e8-8f6b-8491267a0c90\";\nexport default function GetAccessToken() {\n  _s();\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n  useEffect(() => {\n    const code = searchParams.get(\"code\");\n    console.log(\"CODE:\");\n    console.log(code);\n    const xWwwformUrlencodedData = {\n      grant_type: \"authorization_code\",\n      client_id: CLIENT_ID,\n      redirect_uri: REDIRECT_URL,\n      client_secret: CLIENT_SECRET,\n      code_challenge: CODE_CHALLENGE,\n      code: code\n    };\n    axios.post(`${AUTH_SERVER_ADDRESS}/realms/LibraryAppRealm/protocol/openid-connect/token`, qs.stringify(xWwwformUrlencodedData), {\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(res => {\n      localStorage.setItem(\"access_token\", res.data['access_token']);\n      navigate('/');\n      Request.sendRequest(\"/aaa\", HttpMethods.PATCH, {\n        \"a444444\": \"a1111\"\n      }).then(r => {\n        console.log(r);\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [navigate]);\n}\n_s(GetAccessToken, \"v8hQjlU8qJmeVDPESM/FtpABWjw=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c = GetAccessToken;\nvar _c;\n$RefreshReg$(_c, \"GetAccessToken\");","map":{"version":3,"names":["useEffect","useNavigate","useSearchParams","axios","qs","Request","HttpMethods","AUTH_SERVER_ADDRESS","CLIENT_ID","REDIRECT_URL","CLIENT_SECRET","CODE_CHALLENGE","GetAccessToken","_s","navigate","searchParams","setSearchParams","code","get","console","log","xWwwformUrlencodedData","grant_type","client_id","redirect_uri","client_secret","code_challenge","post","stringify","headers","then","res","localStorage","setItem","data","sendRequest","PATCH","r","catch","err","_c","$RefreshReg$"],"sources":["D:/nulp/6_semester/PZ-documenting/project/frontend/LibraryProjectFrontEndPart/my-react-app/src/requests/GetAccessToken.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport qs from 'qs';\r\nimport Request from \"./Request\";\r\nimport { HttpMethods } from \"./HttpMethods\";\r\n\r\nexport const AUTH_SERVER_ADDRESS = \"http://localhost:8090\"\r\nexport const CLIENT_ID = \"LibraryAppClient\"\r\nconst REDIRECT_URL = \"http://localhost:3000/get-access-token-by-code\"\r\nconst CLIENT_SECRET = \"6xERbEJcORF4vdW5OdqyEyGtsGRbhQaT\"\r\nconst CODE_CHALLENGE = \"61dcd90c-01e1-4a01-a40a-11538f121c08.a4ceddf2-4a25-482d-9f75-0681b0c6e13b.6e7a8a21-bdb5-49e8-8f6b-8491267a0c90\"\r\n\r\nexport default function GetAccessToken(){\r\n    const navigate = useNavigate()\r\n    const [searchParams, setSearchParams] = useSearchParams()\r\n\r\n    useEffect(() => {\r\n\r\n        const code = searchParams.get(\"code\")\r\n\r\n        console.log(\"CODE:\")\r\n        console.log(code)\r\n\r\n        const xWwwformUrlencodedData = {\r\n            grant_type: \"authorization_code\",\r\n            client_id: CLIENT_ID,\r\n            redirect_uri: REDIRECT_URL,\r\n            client_secret: CLIENT_SECRET,\r\n            code_challenge: CODE_CHALLENGE,\r\n            code: code\r\n        }\r\n\r\n        axios.post(`${AUTH_SERVER_ADDRESS}/realms/LibraryAppRealm/protocol/openid-connect/token`, \r\n            qs.stringify(xWwwformUrlencodedData),\r\n                {\r\n                    headers: { 'content-type': 'application/x-www-form-urlencoded'},\r\n                }).then((res) => {\r\n                    localStorage.setItem(\"access_token\", res.data['access_token'])\r\n                    navigate('/')\r\n\r\n                    Request.sendRequest(\"/aaa\", HttpMethods.PATCH, {\"a444444\": \"a1111\"}).then((r) => {\r\n                        console.log(r)\r\n                    })\r\n\r\n                    \r\n                }).catch((err) => {\r\n                    console.log(err)\r\n                })\r\n    }, [navigate]);\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,eAAe,QAAQ,kBAAkB;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,WAAW,QAAQ,eAAe;AAE3C,OAAO,MAAMC,mBAAmB,GAAG,uBAAuB;AAC1D,OAAO,MAAMC,SAAS,GAAG,kBAAkB;AAC3C,MAAMC,YAAY,GAAG,gDAAgD;AACrE,MAAMC,aAAa,GAAG,kCAAkC;AACxD,MAAMC,cAAc,GAAG,gHAAgH;AAEvI,eAAe,SAASC,cAAcA,CAAA,EAAE;EAAAC,EAAA;EACpC,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGd,eAAe,CAAC,CAAC;EAEzDF,SAAS,CAAC,MAAM;IAEZ,MAAMiB,IAAI,GAAGF,YAAY,CAACG,GAAG,CAAC,MAAM,CAAC;IAErCC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpBD,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IAEjB,MAAMI,sBAAsB,GAAG;MAC3BC,UAAU,EAAE,oBAAoB;MAChCC,SAAS,EAAEf,SAAS;MACpBgB,YAAY,EAAEf,YAAY;MAC1BgB,aAAa,EAAEf,aAAa;MAC5BgB,cAAc,EAAEf,cAAc;MAC9BM,IAAI,EAAEA;IACV,CAAC;IAEDd,KAAK,CAACwB,IAAI,CAAE,GAAEpB,mBAAoB,uDAAsD,EACpFH,EAAE,CAACwB,SAAS,CAACP,sBAAsB,CAAC,EAChC;MACIQ,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmC;IAClE,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;MACbC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,GAAG,CAACG,IAAI,CAAC,cAAc,CAAC,CAAC;MAC9DpB,QAAQ,CAAC,GAAG,CAAC;MAEbT,OAAO,CAAC8B,WAAW,CAAC,MAAM,EAAE7B,WAAW,CAAC8B,KAAK,EAAE;QAAC,SAAS,EAAE;MAAO,CAAC,CAAC,CAACN,IAAI,CAAEO,CAAC,IAAK;QAC7ElB,OAAO,CAACC,GAAG,CAACiB,CAAC,CAAC;MAClB,CAAC,CAAC;IAGN,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAK;MACdpB,OAAO,CAACC,GAAG,CAACmB,GAAG,CAAC;IACpB,CAAC,CAAC;EACd,CAAC,EAAE,CAACzB,QAAQ,CAAC,CAAC;AAElB;AAACD,EAAA,CAtCuBD,cAAc;EAAA,QACjBX,WAAW,EACYC,eAAe;AAAA;AAAAsC,EAAA,GAFnC5B,cAAc;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}